apply plugin: 'com.android.application'
android {
    compileSdkVersion 25

    signingConfigs {
        release {
            storeFile file(getAndroidKeystore())
            storePassword getAndroidStorePassword()
            keyAlias getAndroidKeyAlias()
            keyPassword getAndroidKeyPassword()
        }
    }

    defaultConfig {
        applicationId 'net.kervala.comicsreader'
        minSdkVersion 9
        targetSdkVersion 25
        versionCode 29
        versionName "2.3." + getHgRevision()
        signingConfig signingConfigs.release

        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL_FORCE_FEATURES=TRUE", "-DANDROID_PLATFORM=android-9"
            }
        }

        ndk {
            abiFilters 'x86', 'armeabi-v7a'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "string", "build_date", getDate()
            signingConfig signingConfigs.release
        }

        debug {
            minifyEnabled false
            jniDebuggable true
            resValue "string", "build_date", getDate()
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        abortOnError false
    }

    productFlavors {
    }
    externalNativeBuild {
        cmake {
            path 'src/main/jni/CMakeLists.txt'
        }
    }
}
// create a file "version.txt" in "app" folder with current version
task generateVersion doLast {
    file('build/version.txt').text = android.defaultConfig.versionName
}
tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn generateVersion
}
def getHgRevision() {
    def os = new ByteArrayOutputStream()
    exec {
        commandLine 'hg', 'tip', '--template', '{rev}'
        standardOutput = os;
    }

    return os.toString()
}
static def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd HH:mm:ss')
    return formattedDate
}
def getAndroidKeystore() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('ant.properties').newDataInputStream())
    def keystore = properties.getProperty('key.store', null)
    if (keystore == null)
        throw new GradleException("Keystore location not found. Define location with key.store in the ant.properties file.")

    return keystore
}
def getAndroidStorePassword() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('ant.properties').newDataInputStream())
    def password = properties.getProperty('key.store.password', null)
    if (password == null)
        throw new GradleException("Keystore password not found. Define location with key.store.password in the ant.properties file.")

    return password
}
def getAndroidKeyAlias() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('ant.properties').newDataInputStream())
    def keyalias = properties.getProperty('key.alias', null)
    if (keyalias == null)
        throw new GradleException("Key alias not found. Define location with key.alias in the ant.properties file.")

    return keyalias
}
def getAndroidKeyPassword() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('ant.properties').newDataInputStream())
    def password = properties.getProperty('key.alias.password', null)
    if (password == null)
        throw new GradleException("Key alias password not found. Define location with key.alias.password in the ant.properties file.")

    return password
}

dependencies {
}